
@inject SignInManager<User> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}

<ul id="nav-in-profile" class="nav flex-column nav-pills nav-fill">
    <li class="@ManageNavPages.IndexNavClass(ViewContext) rounded-link text-center"><a class="d-block" asp-action="Index">Profile</a></li>
    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext) rounded-link text-center"><a class="d-block" asp-action="ChangePassword">Password</a></li>
    @*@if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext) rounded-link text-center"><a class="d-block" asp-action="ExternalLogins">External logins</a></li>
    }*@
    <li class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext) rounded-link text-center"><a class="d-block" asp-action="TwoFactorAuthentication">Two-factor authentication</a></li>
    @if (User.IsInRole("admin"))
    {
        <li class="rounded-link text-center"><a class="d-block" asp-controller="User" asp-action="Index">Users</a></li>
        <li class="rounded-link text-center"><a class="d-block" asp-controller="Movie" asp-action="Create">Create Movie</a></li>
    }
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="rounded-link text-center"><a class="d-block" asp-controller="Movie" asp-action="GetOrders">Tickets</a></li>
    }
</ul>

